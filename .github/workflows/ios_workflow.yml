name: Ios workflow

on:
  workflow_call:

jobs:
  e2e:
    name: Integration test
    strategy:
      matrix:
        device: [ iPhone 11 Pro Max Simulator (15.2) ]
      fail-fast: false
    runs-on: macos-latest
    steps:
      - name: List all simulators
        env:
          PROJECT_ID: ${{secrets.PROJECT_D}}
        run: echo $PROJECT_ID
      - run: xcrun xctrace list devices
      - name: Start Simulator
        run: |
          UDID=$(xcrun xctrace list devices | grep "^${{ matrix.device }}" | awk '{gsub(/[()]/,""); print $NF}')
          echo $UDID
          xcrun simctl boot "${UDID:?No Simulator with this name found}"
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
      - run: flutter channel beta
      - run: flutter upgrade
      - run: flutter pub get
      - run: flutter config --enable-ios
      - run: flutter create .
      - name: Run integration tests
        run: flutter drive --driver=test/test_driver/integration_test.dart --target=test/integration_test/app_test.dart

  build:
    needs: e2e
    name: Build Flutter App
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Get dependencies
        run: flutter channel beta
      - run: flutter upgrade
      - run: flutter pub get
      - run: flutter config --enable-ios
      - run: flutter create .
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: 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
          P12_PASSWORD: admin
          BUILD_PROVISION_PROFILE_BASE64: 
          KEYCHAIN_PASSWORD: 7362
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Build
        run: flutter build ios --release --no-codesign
      - name: Build resolve Swift dependencies
        run: xcodebuild -resolvePackageDependencies -workspace ios/Runner.xcworkspace -scheme Runner -configuration "Release"
      - name: Build xArchive
        run: |
          xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner -configuration "Release-staging" DEVELOPMENT_TEAM=4548NWFTN8 -sdk 'iphoneos' -destination 'generic/platform=iOS' -archivePath build/app.xcarchive PROVISIONING_PROFILE=00008030-000270243679802E -allowProvisioningUpdates
      - name: Export ipa
        run: |
          xcodebuild -exportArchive -archivePath build-output/app.xcarchive -exportPath build-output/ios -exportOptionsPlist ExportOptions.plist
      - name: Archive Production Artifact
        uses: actions/upload-artifact@v3
        with:
          name: App.ipa
          path: /Users/runner/work/YOUR_APP/YOUR_APP/app/build-output/ios/ipa/carte_crm_test.ipa

  deploy:
    name: Deploy app
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ios_build
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Upload IPA
        uses: wzieba/Firebase-Distribution-Github-Action@master
        with:
          appId: 1:420295022617:ios:a8368f9757aec30e4d3288
          token: 1//069zeH2EL8NWICgYIARAAGAYSNwF-L9IrWy9_03-PKJVkSJyV1zAoSmkZKoLlecYkqXcQedU1EshrwoBW7jCFX5t78aosc8QhONA
          groups: testers
          file: Runner.ipa
